swagger: '2.0'
info:
  description: This is a simple TripApp API
  version: 1.0.0
  title: Simple TripApp API

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# all paths will be relative to the basePath specified
# basePath: /v1


# tags are used for organizing operations
tags:
- name: tickets
  description: Operations for tickets manipulation
- name: validation
  description: Operations for tickets validation  
- name: users
  description: Operations for user management
  
# schemes:
# - http
# - https
paths:
  /tickets:
    get:
      tags: 
        - tickets
      summary: searches tickets purchases
      operationId: searchTickets
      description: |
        By passing in the appropriate options, you can search for
        available ticket in the system
      produces:
      - application/json
      parameters:
      - in: query
        name: searchString
        description: pass an optional search string for looking up tickets
        required: false
        type: string
      - in: query
        name: skip
        description: number of records to skip for pagination
        type: integer
        format: int32
        minimum: 0
      - in: query
        name: limit
        description: maximum number of records to return
        type: integer
        format: int32
        minimum: 0
        maximum: 50
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/TicketPurchase'
        400:
          description: bad input parameter
    post:
      tags: 
        - tickets
      summary: adds an ticket purchase item
      operationId: addTicketPurchase
      description: Adds an item to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: ticketPurchase
        description: TicketPurchase item to add
        schema:
          $ref: '#/definitions/TicketPurchase'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
  /validation:
    get:
      tags: 
        - validation
      summary: searches tickets validations
      operationId: searchValidations
      description: |
        By passing in the appropriate options, you can search for
        available ticket validations in the system
      produces:
      - application/json
      parameters:
      - in: query
        name: searchString
        description: pass an optional search string for looking up ticket validations
        required: false
        type: string
      - in: query
        name: skip
        description: number of records to skip for pagination
        type: integer
        format: int32
        minimum: 0
      - in: query
        name: limit
        description: maximum number of records to return
        type: integer
        format: int32
        minimum: 0
        maximum: 50
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/TicketValidation'
        400:
          description: bad input parameter
    post:
      tags: 
        - validation
      summary: adds an ticket validation item
      operationId: addTicketValidation
      description: Adds an item to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: ticketPurchase
        description: TicketValidation item to add
        schema:
          $ref: '#/definitions/TicketValidation'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
  
  /user:
    post:
      tags: 
        - users
      summary: Create user
      description: This can only be done by any user.
      operationId: createUser
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags: 
        - users
      summary: Logs user into the system
      operationId: loginUser
      produces:
      - application/json
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        400:
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags: 
        - users
      summary: Logs out current logged in user session
      operationId: logoutUser
      produces:
      - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags: 
        - users
      summary: Get user by user name
      operationId: getUserByName
      produces:
      - application/json
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched.
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid username supplied
        404:
          description: User not found
    put:
      tags: 
        - users
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: username that need to be updated
        required: true
        type: string
      - in: body
        name: body
        description: Updated user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        400:
          description: Invalid user supplied
        404:
          description: User not found
    delete:
      tags: 
        - users
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: The username that needs to be deleted
        required: true
        type: string
      responses:
        400:
          description: Invalid username supplied
        404:
          description: User not found
definitions:
  TicketPurchase:
    type: object
    required:
    - id
    - type
    - startDateTime
    - endDateTime
    properties:
      id:
        type: string
        format: uuid
        example: d290f1ee-6c54-4b01-90e6-d701748f0851
      price:
        type: number
        format: double
        example: 50.50
      startDateTime:
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z  
      endDateTime:
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      numberOfPassangers:
        type: integer
        description: Number of passangers allowed to travel with buyer and including buyer too.
      type:
        $ref: '#/definitions/TicketType'
  TicketType:
    required:
    - name
    properties:
      id:
        type: integer
      name:
        type: string
        example: 1 hour ticket
      duration:
        type: integer
        example:  60
        description: duration in minutes
      price:
        type: number
        format: double
        example: 10.50
  TicketValidation:
    required:
    - validationDateTime
    - isValid
    - ticket
    properties:
      id:
        type: integer
      validationDateTime:
        type: string
        example: 1 hour ticket
      isValid:
        type: boolean
        description: Is ticket valid?
      ticket:
        $ref: '#/definitions/TicketType'
      controller:
        $ref: '#/definitions/TicketType'
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string

# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /sergiosuperstar/TripAppSimple/1.0.0
# basePath: /v1/TripAppSimple/1.0.0
schemes:
 - https
 - http