/*
 * Simple TripApp API
 *
 * This is a simple TripApp API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TicketValidation :  IEquatable<TicketValidation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TicketValidation" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="ValidationDateTime">ValidationDateTime (required).</param>
        /// <param name="IsValid">Is ticket valid? (required).</param>
        /// <param name="Ticket">Ticket (required).</param>
        /// <param name="Controller">Controller.</param>
        public TicketValidation(int? Id = null, string ValidationDateTime = null, bool? IsValid = null, TicketType Ticket = null, TicketType Controller = null)
        {
            // to ensure "ValidationDateTime" is required (not null)
            if (ValidationDateTime == null)
            {
                throw new InvalidDataException("ValidationDateTime is a required property for TicketValidation and cannot be null");
            }
            else
            {
                this.ValidationDateTime = ValidationDateTime;
            }
            // to ensure "IsValid" is required (not null)
            if (IsValid == null)
            {
                throw new InvalidDataException("IsValid is a required property for TicketValidation and cannot be null");
            }
            else
            {
                this.IsValid = IsValid;
            }
            // to ensure "Ticket" is required (not null)
            if (Ticket == null)
            {
                throw new InvalidDataException("Ticket is a required property for TicketValidation and cannot be null");
            }
            else
            {
                this.Ticket = Ticket;
            }
            this.Id = Id;
            this.Controller = Controller;
            
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets ValidationDateTime
        /// </summary>
        [DataMember(Name="validationDateTime")]
        public string ValidationDateTime { get; set; }

        /// <summary>
        /// Is ticket valid?
        /// </summary>
        /// <value>Is ticket valid?</value>
        [DataMember(Name="isValid")]
        public bool? IsValid { get; set; }

        /// <summary>
        /// Gets or Sets Ticket
        /// </summary>
        [DataMember(Name="ticket")]
        public TicketType Ticket { get; set; }

        /// <summary>
        /// Gets or Sets Controller
        /// </summary>
        [DataMember(Name="controller")]
        public TicketType Controller { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TicketValidation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ValidationDateTime: ").Append(ValidationDateTime).Append("\n");
            sb.Append("  IsValid: ").Append(IsValid).Append("\n");
            sb.Append("  Ticket: ").Append(Ticket).Append("\n");
            sb.Append("  Controller: ").Append(Controller).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((TicketValidation)obj);
        }

        /// <summary>
        /// Returns true if TicketValidation instances are equal
        /// </summary>
        /// <param name="other">Instance of TicketValidation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TicketValidation other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.ValidationDateTime == other.ValidationDateTime ||
                    this.ValidationDateTime != null &&
                    this.ValidationDateTime.Equals(other.ValidationDateTime)
                ) && 
                (
                    this.IsValid == other.IsValid ||
                    this.IsValid != null &&
                    this.IsValid.Equals(other.IsValid)
                ) && 
                (
                    this.Ticket == other.Ticket ||
                    this.Ticket != null &&
                    this.Ticket.Equals(other.Ticket)
                ) && 
                (
                    this.Controller == other.Controller ||
                    this.Controller != null &&
                    this.Controller.Equals(other.Controller)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                    if (this.ValidationDateTime != null)
                    hash = hash * 59 + this.ValidationDateTime.GetHashCode();
                    if (this.IsValid != null)
                    hash = hash * 59 + this.IsValid.GetHashCode();
                    if (this.Ticket != null)
                    hash = hash * 59 + this.Ticket.GetHashCode();
                    if (this.Controller != null)
                    hash = hash * 59 + this.Controller.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(TicketValidation left, TicketValidation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TicketValidation left, TicketValidation right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
